DB_PASS=postgres
DB_PORT=5435
DB_USER=postgres
DB_NAME=aviation-tracker-dev
#MAXCONWAITINGTIME: 1000
# Server settings:
DB_HOST=host.docker.internal

DOCKER_HOSTNAME="172.17.0.2"
#DB_HOST=localhost

# JWT settings:
JWT_SECRET_KEY="secret"
JWT_REFRESH_KEY="refresh"

REDIS_HOST="redis:6380"

REDIS_PASSWORD=""
REDIS_DB=0
REDIS_PORT=8379

ADDR="0.0.0.0:6969"

AVIATION_STACK_API_KEY="ec3bae0d3ec5e854f78511b0c0555fce"

#cmd = "templ generate && ./tailwindcss -i controller/static/css/main.css -o assets/css/output.css --minify &&  go build -o ./tmp/main ."


#postgres://postgres:postgres@host.docker.internal:5435/aviation-tracker-dev?sslmode=disable&timezone=utc

#CREATE INDEX idx_departure_iata ON flights (departure_iata);
#CREATE INDEX idx_arrival_iata ON flights (arrival_iata);
#CREATE INDEX idx_codeshared_airline_iata ON flights (codeshared_airline_iata);


# ADD TO DB

#ALTER TABLE airline
#    ADD FOREIGN KEY (country_iso2) REFERENCES country(country_iso2);
#
#ALTER TABLE airline
#    ADD FOREIGN KEY (country_iso2) REFERENCES country(country_iso2);
#
#ALTER TABLE country
#    ADD CONSTRAINT unique_country_iso2 UNIQUE (country_iso2);

#ALTER TABLE airline
#ADD FOREIGN KEY (country_iso2) REFERENCES country(country_iso2);


# https://github.com/muhwyndhamhp/gotes-mx/blob/main/docker-compose.yaml
# https://github.com/greuben92/go-htmx-realworld/blob/master/docker-compose.yaml













#type T struct{ v string }
#
#func (t *T) Set() { t.v = "modified" }
#
#func main(){
# t := T{}
# t.Set()
# fmt.Println(t.v)
#}










#// findNewCityData identifies new city data by comparing the API data with existing data
#//func (s *ServiceJob) findNewCityData(apiData []structs.City, tableData map[int]struct{}) []structs.City {
#//	var newData []structs.City
#//
#//	for _, a := range apiData {
#//		if _, exists := tableData[a.CityID]; !exists {
#//			newData = append(newData, a)
#//		}
#//	}
#//
#//	return newData
#//}
#//
#//func (s *ServiceJob) findNewCountryData(apiData []structs.Country, tableData map[int]struct{}) []structs.Country {
#//	var newData []structs.Country
#//
#//	for _, a := range apiData {
#//		if _, exists := tableData[a.CountryIsoNumeric]; !exists {
#//			newData = append(newData, a)
#//		}
#//	}
#//
#//	return newData
#//}
#//
#//func (s *ServiceJob) findNewAirportData(apiData []structs.Airport, tableData map[int]struct{}) []structs.Airport {
#//	var newData []structs.Airport
#//
#//	for _, a := range apiData {
#//		if _, exists := tableData[a.AirportID]; !exists {
#//			newData = append(newData, a)
#//		}
#//	}
#//
#//	return newData
#//}
#//
#//func (s *ServiceJob) findNewAirplaneData(apiData []structs.Airplane, tableData map[int]struct{}) []structs.Airplane {
#//	var newData []structs.Airplane
#//
#//	for _, a := range apiData {
#//		if _, exists := tableData[a.AirplaneID]; !exists {
#//			newData = append(newData, a)
#//		}
#//	}
#//
#//	return newData
#//}
#//
#//func (s *ServiceJob) findNewTaxData(apiData []structs.Tax, tableData map[int]struct{}) []structs.Tax {
#//	var newData []structs.Tax
#//
#//	for _, a := range apiData {
#//		if _, exists := tableData[a.TaxID]; !exists {
#//			newData = append(newData, a)
#//		}
#//	}
#//
#//	return newData
#//}
#//
#//func (s *ServiceJob) findNewAirlineData(apiData []structs.Airline, tableData map[int]struct{}) []structs.Airline {
#//	var newData []structs.Airline
#//
#//	for _, a := range apiData {
#//		if _, exists := tableData[a.AirlineID]; !exists {
#//			newData = append(newData, a)
#//		}
#//	}
#//
#//	return newData
#//}
#//
#//func (s *ServiceJob) findNewAircraftData(apiData []structs.Aircraft, tableData map[int]struct{}) []structs.Aircraft {
#//	var newData []structs.Aircraft
#//
#//	for _, a := range apiData {
#//		if _, exists := tableData[a.PlaneTypeId]; !exists {
#//			newData = append(newData, a)
#//		}
#//	}
#//
#//	return newData
#//}





#FROM node:latest as assets
#WORKDIR /app
#COPY package.json ./
#COPY package-lock.json ./
#COPY postcss.config.cjs ./
#COPY fonts.css ./
#RUN mkdir -p controller/static/css controller/static/fonts
#RUN npm install --ci
#RUN npm run fonts
#
## Define the "base" stage
#FROM golang:latest as base
#WORKDIR /app
#COPY go.mod ./
#COPY go.sum ./
#RUN go mod download
#COPY . .
#
## Define the "dev" stage
#FROM base as dev
#RUN curl -sSfL https://raw.githubusercontent.com/cosmtrek/air/master/install.sh | sh -s -- -b $(go env GOPATH)/bin
#WORKDIR /app
#RUN templ generate
#CMD ["air"]
#
## Define the final stage
#FROM base as final
#COPY --from=assets /app/controller/static/css/* ./controller/static/css/
#COPY --from=assets /app/controller/static/fonts/* ./controller/static/fonts/
#RUN CGO_ENABLED=0 go build -o /app/server
#EXPOSE 6969
#ENTRYPOINT ["/app/server"]

