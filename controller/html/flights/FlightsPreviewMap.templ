package flights

import (
	"github.com/FACorreiaa/Aviation-tracker/controller/models"
)

script previewMapContainer(data []models.LiveFlights) {
    const tileLayer = new  ol.layer.Tile({
  source: new ol.source.StadiaMaps({
    layer: 'stamen_toner',
  }),
});

console.log('data', data)

const map = new ol.Map({
  layers: [tileLayer],
  target: 'map',
  view: new ol.View({
    center: [-11000000, 4600000],
    zoom: 1,
  }),
});

const style = new ol.style.Style({
  stroke: new ol.style.Stroke({
    color: '#EAE911',
    width: 3,
  }),
});

const flightsSource = new ol.source.Vector({
        attributions: 'Flight data by ' + '<a href="https://openflights.org/data.html">OpenFlights</a>,',
        loader: function () {
            const features = [];

            for (let i = 0; i < data.length - 1; i++) {
                const from = data[i];
                const to = data[i + 1];

                const arcGenerator = new arc.GreatCircle(
                    {
                        x: parseFloat(from.departure_longitude),
                        y: parseFloat(from.departure_latitude),
                    },
                    {
                        x: parseFloat(to.departure_longitude),
                        y: parseFloat(to.departure_latitude),
                    }
                );

                const arcLine = arcGenerator.Arc(100, { offset: 10 });

                arcLine.geometries.forEach(function (geometry) {
                    const line = new ol.geom.LineString(geometry.coords);
                    line.transform('EPSG:4326', 'EPSG:3857');

                    features.push(
                        new ol.Feature({
                            geometry: line,
                            finished: false,
                        })
                    );
                });
            }

            addLater(features, 0);
            tileLayer.on('postrender', animateFlights);
        },
    });


const flightsLayer = new ol.layer.Vector({
  source: flightsSource,
  style: function (feature) {
    if (feature.get('finished')) {
      return style;
    }
    return null;
  },
});

map.addLayer(flightsLayer);

const pointsPerMs = 0.02;
function animateFlights(event) {
  const vectorContext = ol.render.getVectorContext(event);
  const frameState = event.frameState;
  vectorContext.setStyle(style);

  const features = flightsSource.getFeatures();
  for (let i = 0; i < features.length; i++) {
    const feature = features[i];
    if (!feature.get('finished')) {
      const coords = feature.getGeometry().getCoordinates();
      const elapsedTime = frameState.time - feature.get('start');
      if (elapsedTime >= 0) {
        const elapsedPoints = elapsedTime * pointsPerMs;

        if (elapsedPoints >= coords.length) {
          feature.set('finished', true);
        }

        const maxIndex = Math.min(elapsedPoints, coords.length);
        const currentLine = new ol.geom.LineString(coords.slice(0, maxIndex));

        const worldWidth = ol.extent.getWidth(map.getView().getProjection().getExtent());
        const offset = Math.floor(map.getView().getCenter()[0] / worldWidth);

        currentLine.translate(offset * worldWidth, 0);
        vectorContext.drawGeometry(currentLine);
        currentLine.translate(worldWidth, 0);
        vectorContext.drawGeometry(currentLine);
      }
    }
  }
  map.render();
}

function addLater(features, timeout) {
  window.setTimeout(function () {
    let start = Date.now();
    features.forEach(function (feature) {
      feature.set('start', start);
      flightsSource.addFeature(feature);
      const duration = (feature.getGeometry().getCoordinates().length - 1) / pointsPerMs;
      start += duration;
    });
  }, timeout);
}
}

templ FlightsPreviewMap(data []models.LiveFlights) {
	<html>
		<head>
			<style scoped>
				.map {
					width: 100%;
					height: 500px;
				}
        .map-container {
					position:
					relative
					height: 600px;
          padding-top: 10px;
				}
				a.skiplink {
					position:
					absolute
					clip: rect(1px, 1px, 1px, 1px);
					padding:
					0
					border:
					0
					height: 1px;
					width: 1px;
					overflow:
					hidden
				}
				a.skiplink:focus {
					clip:
					auto
					height:
					auto
					width:
					auto
					background-color: #fff;
					padding: 0.3em;
				}
				#map:focus {
					outline: #4A74A8 solid 0.15em;
				}
			</style>
		</head>
		<body onload={ previewMapContainer(data) }>
			<div class="map-container">
				<div id="map" class="w-full h-full map" tabindex="0"><button aria-describedby="popup" data-tippy-content="popup" id="popup"></button></div>
			</div>
			<button id="zoom-out" class="btn btn-secondary">Zoom out</button>
			<button id="zoom-in" class="btn btn-secondary">Zoom in</button>
			<script src="https://api.mapbox.com/mapbox.js/plugins/arc.js/v0.1.0/arc.js"></script>
		</body>
	</html>
}
