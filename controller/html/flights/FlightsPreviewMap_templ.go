// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.543
package flights

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import (
	"github.com/FACorreiaa/Aviation-tracker/controller/models"
)

func previewMapContainer(data []models.LiveFlights) templ.ComponentScript {
	return templ.ComponentScript{
		Name: `__templ_previewMapContainer_305e`,
		Function: `function __templ_previewMapContainer_305e(data){const tileLayer = new  ol.layer.Tile({
  source: new ol.source.StadiaMaps({
    layer: 'stamen_toner',
  }),
});

console.log('data', data)

const map = new ol.Map({
  layers: [tileLayer],
  target: 'map',
  view: new ol.View({
    center: [-11000000, 4600000],
    zoom: 1,
  }),
});

const style = new ol.style.Style({
  stroke: new ol.style.Stroke({
    color: '#EAE911',
    width: 3,
  }),
});

const flightsSource = new ol.source.Vector({
        attributions: 'Flight data by ' + '<a href="https://openflights.org/data.html">OpenFlights</a>,',
        loader: function () {
            const features = [];

            for (let i = 0; i < data.length - 1; i++) {
                const from = data[i];
                const to = data[i + 1];

                const arcGenerator = new arc.GreatCircle(
                    {
                        x: parseFloat(from.departure_longitude),
                        y: parseFloat(from.departure_latitude),
                    },
                    {
                        x: parseFloat(to.departure_longitude),
                        y: parseFloat(to.departure_latitude),
                    }
                );

                const arcLine = arcGenerator.Arc(100, { offset: 10 });

                arcLine.geometries.forEach(function (geometry) {
                    const line = new ol.geom.LineString(geometry.coords);
                    line.transform('EPSG:4326', 'EPSG:3857');

                    features.push(
                        new ol.Feature({
                            geometry: line,
                            finished: false,
                        })
                    );
                });
            }

            addLater(features, 0);
            tileLayer.on('postrender', animateFlights);
        },
    });


const flightsLayer = new ol.layer.Vector({
  source: flightsSource,
  style: function (feature) {
    if (feature.get('finished')) {
      return style;
    }
    return null;
  },
});

map.addLayer(flightsLayer);

const pointsPerMs = 0.02;
function animateFlights(event) {
  const vectorContext = ol.render.getVectorContext(event);
  const frameState = event.frameState;
  vectorContext.setStyle(style);

  const features = flightsSource.getFeatures();
  for (let i = 0; i < features.length; i++) {
    const feature = features[i];
    if (!feature.get('finished')) {
      const coords = feature.getGeometry().getCoordinates();
      const elapsedTime = frameState.time - feature.get('start');
      if (elapsedTime >= 0) {
        const elapsedPoints = elapsedTime * pointsPerMs;

        if (elapsedPoints >= coords.length) {
          feature.set('finished', true);
        }

        const maxIndex = Math.min(elapsedPoints, coords.length);
        const currentLine = new ol.geom.LineString(coords.slice(0, maxIndex));

        const worldWidth = ol.extent.getWidth(map.getView().getProjection().getExtent());
        const offset = Math.floor(map.getView().getCenter()[0] / worldWidth);

        currentLine.translate(offset * worldWidth, 0);
        vectorContext.drawGeometry(currentLine);
        currentLine.translate(worldWidth, 0);
        vectorContext.drawGeometry(currentLine);
      }
    }
  }
  map.render();
}

function addLater(features, timeout) {
  window.setTimeout(function () {
    let start = Date.now();
    features.forEach(function (feature) {
      feature.set('start', start);
      flightsSource.addFeature(feature);
      const duration = (feature.getGeometry().getCoordinates().length - 1) / pointsPerMs;
      start += duration;
    });
  }, timeout);
}
}`,
		Call:       templ.SafeScript(`__templ_previewMapContainer_305e`, data),
		CallInline: templ.SafeScriptInline(`__templ_previewMapContainer_305e`, data),
	}
}

func FlightsPreviewMap(data []models.LiveFlights) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
		if !templ_7745c5c3_IsBuffer {
			templ_7745c5c3_Buffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<html><head><style scoped>\n\t\t\t\t.map {\n\t\t\t\t\twidth: 100%;\n\t\t\t\t\theight: 500px;\n\t\t\t\t}\n        .map-container {\n\t\t\t\t\tposition:\n\t\t\t\t\trelative\n\t\t\t\t\theight: 600px;\n          padding-top: 10px;\n\t\t\t\t}\n\t\t\t\ta.skiplink {\n\t\t\t\t\tposition:\n\t\t\t\t\tabsolute\n\t\t\t\t\tclip: rect(1px, 1px, 1px, 1px);\n\t\t\t\t\tpadding:\n\t\t\t\t\t0\n\t\t\t\t\tborder:\n\t\t\t\t\t0\n\t\t\t\t\theight: 1px;\n\t\t\t\t\twidth: 1px;\n\t\t\t\t\toverflow:\n\t\t\t\t\thidden\n\t\t\t\t}\n\t\t\t\ta.skiplink:focus {\n\t\t\t\t\tclip:\n\t\t\t\t\tauto\n\t\t\t\t\theight:\n\t\t\t\t\tauto\n\t\t\t\t\twidth:\n\t\t\t\t\tauto\n\t\t\t\t\tbackground-color: #fff;\n\t\t\t\t\tpadding: 0.3em;\n\t\t\t\t}\n\t\t\t\t#map:focus {\n\t\t\t\t\toutline: #4A74A8 solid 0.15em;\n\t\t\t\t}\n\t\t\t</style></head>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ.RenderScriptItems(ctx, templ_7745c5c3_Buffer, previewMapContainer(data))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<body onload=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var2 templ.ComponentScript = previewMapContainer(data)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ_7745c5c3_Var2.Call)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\"><div class=\"map-container\"><div id=\"map\" class=\"w-full h-full map\" tabindex=\"0\"><button aria-describedby=\"popup\" data-tippy-content=\"popup\" id=\"popup\"></button></div></div><button id=\"zoom-out\" class=\"btn btn-secondary\">Zoom out</button> <button id=\"zoom-in\" class=\"btn btn-secondary\">Zoom in</button><script src=\"https://api.mapbox.com/mapbox.js/plugins/arc.js/v0.1.0/arc.js\"></script></body></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if !templ_7745c5c3_IsBuffer {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteTo(templ_7745c5c3_W)
		}
		return templ_7745c5c3_Err
	})
}
