package airline

import "github.com/FACorreiaa/Aviation-tracker/controller/models"

script detailedMapContainer(data models.Airline) {
  function createFeatureFromAirline(airline) {

        const iconStyle = new ol.style.Style({
            image: new ol.style.Icon({
                anchor: [1, 46],
                anchorXUnits: 'fraction',
                anchorYUnits: 'pixels',
                src: '../../static/icons/marker.png',
                scale: 0.5,
            }),
        });

        const feature = new ol.Feature({
            geometry: new ol.geom.Point(ol.proj.fromLonLat([airline.longitude, airline.latitude])),
        });


        feature.setStyle(iconStyle);

        return feature;
    }


   const vectorSource = new ol.source.Vector({
    features: [createFeatureFromAirline(data)],
  });

   const vectorLayer = new ol.layer.Vector({
      source: vectorSource,
   });

  const tileLayer = new ol.layer.Tile({
            source: new ol.source.OSM(),
         })

   const map = new ol.Map({
      layers: [tileLayer, vectorLayer],
      target: document.getElementById('map'),
      view: new ol.View({
         center: ol.proj.fromLonLat([data.longitude, data.latitude]),
         zoom: 10,
      }),
   });

   const element = document.getElementById('popup');
   const popup = new ol.Overlay({
      element: element,
      positioning: 'bottom-center',
      stopEvent: false,
   });
   map.addOverlay(popup);

   let popover;

   function disposePopover() {
      if (popover) {
         popover.dispose();
         popover = undefined;
      }
   }

   const tippyButton = document.getElementById('popup');
    tippy(tippyButton, {
      content: document.createElement('div'),
      interactive: true,
      trigger: 'click',
      placement: 'top',
      animation: 'scale'  ,
      theme: 'translucent'
    });

   map.on('click', function (evt) {
      const feature = map.forEachFeatureAtPixel(evt.pixel, function (feature) {
         return feature;
      });
      disposePopover();
      if (!feature) {
         return;
      }
      popup.setPosition(evt.coordinate);

         //show toolip
      const contentDiv = document.createElement('div');
      contentDiv.innerHTML = `
            <strong>Airport:</strong> ${feature.get('airport')}<br>
    `;
      tippyButton._tippy.setContent(contentDiv);
      tippyButton._tippy.show();
   });



   map.on('pointermove', function (e) {
      const pixel = map.getEventPixel(e.originalEvent);
      const hit = map.hasFeatureAtPixel(pixel);
      map.getTarget().style.cursor = hit ? "pointer" : "";
   });


   map.on('movestart', disposePopover);


   document.getElementById('zoom-out').onclick = function () {
      const view = map.getView();
      const zoom = view.getZoom();
      view.setZoom(zoom - 1);
   };

   document.getElementById('zoom-in').onclick = function () {
      const view = map.getView();
      const zoom = view.getZoom();
      view.setZoom(zoom + 1);
   };

   map.on('dblclick', event => {
       // get the feature you clicked
       const feature = map.forEachFeatureAtPixel(event.pixel, (feature) => {
        return feature
       })
       if(feature instanceof ol.Feature){
         // Fit the feature geometry or extent based on the given map
         map.getView().fit(feature.getGeometry())
         // map.getView().fit(feature.getGeometry().getExtent())
       }
      })

    map.getView().on('change:resolution', function () {
            if (map.getView().getZoom() < 4) {
                vectorLayer.setVisible(false);
            } else {
                vectorLayer.setVisible(true);
            }
        });
}

templ AirlineDetailedMap(data models.Airline) {
	<html>
		<head>
			<style scoped>
				.map {
					width: 100%;
					height: 500px;
				}
				a.skiplink {
					position: absolute;
					clip: rect(1px, 1px, 1px, 1px);
					padding: 0;
					border: 0;
					height: 1px;
					width: 1px;
					overflow: hidden;
				}
				a.skiplink:focus {
					clip: auto;
					height: auto;
					width: auto;
					background-color: #fff;
					padding: 0.3em;
				}
				#map:focus {
					outline: #4A74A8 solid 0.15em;
				}
			</style>
		</head>
		<body onload={ detailedMapContainer(data) }>
				<div id="map" class="map" tabindex="0"><button aria-describedby="popup" data-tippy-content="popup" id="popup"></button></div>
			<div class="pt-2 text-center">
			<button id="zoom-out" class="btn btn-secondary">Zoom out</button>
            			<button id="zoom-in" class="btn btn-secondary">Zoom in</button>
            			</div>
		</body>
	</html>
}
