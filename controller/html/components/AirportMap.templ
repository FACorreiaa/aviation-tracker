package components

import "github.com/FACorreiaa/Aviation-tracker/controller/models"

// function createMarker(coordinates, name) {
//     const iconFeature = new ol.Feature({
//        geometry: new ol.geom.Point(ol.proj.fromLonLat(coordinates)),
//        name: name || 'Marker',
//     });

//     const iconStyle = new ol.style.Style({
//        image: new ol.style.Icon({
//           anchor: [0.5, 46],
//           anchorXUnits: 'fraction',
//           anchorYUnits: 'pixels',
//           src: '../static/icons/airport.png',
//           scale: 0.7,
//        }),
//     });

//     iconFeature.setStyle(iconStyle);

//     return iconFeature;
//  }

//  const markers = [
//     { coordinates: [38.736946, -9.142685], name: 'Marker 1' },
//     { coordinates: [10, 10], name: 'Marker 2' },
//     { coordinates: [41.530918, -8.780565], name: 'Marker 3' },

//  ];

//  const iconFeature = new ol.Feature({
//     geometry: new ol.geom.Point([0, 0]),
//     name: 'Null Island',
//     population: 4000,
//     rainfall: 500,
//  });

// const iconStyle = new ol.style.Style({
//     image: new ol.style.Icon({
//       anchor: [1, 46],
//       anchorXUnits: 'fraction',
//       anchorYUnits: 'pixels',
//       src: '../static/icons/airport.png',
//       scale: 0.5
//     }),
// });

// iconFeature.setStyle(iconStyle);

script mapContainer(data []models.Airport) {
  function createFeatureFromAirport(airport) {

        const iconStyle = new ol.style.Style({
            image: new ol.style.Icon({
                anchor: [1, 46],
                anchorXUnits: 'fraction',
                anchorYUnits: 'pixels',
                src: '../static/icons/marker.png',
                scale: 0.5,
            }),
        });

        const feature = new ol.Feature({
            geometry: new ol.geom.Point(ol.proj.fromLonLat([airport.longitude, airport.latitude])),
            airport: airport.airport_name,
            timezone: airport.timezone,
            gmt: airport.gmt,
            country: airport.country_name,
            style: iconStyle,
        });

        feature.setStyle(iconStyle);

        return feature;
    }


    const vectorSource = new ol.source.Vector({
        features: data.map(airport => createFeatureFromAirport(airport)),
    });

   const vectorLayer = new ol.layer.Vector({
      source: vectorSource,
   });

  const tileLayer = new ol.layer.Tile({
            source: new ol.source.OSM(),
         })

   const map = new ol.Map({
      layers: [tileLayer, vectorLayer],
      target: document.getElementById('map'),
      view: new ol.View({
         center: [0, 0],
         zoom: 2,
      }),
   });

   const element = document.getElementById('popup');
   const popup = new ol.Overlay({
      element: element,
      positioning: 'bottom-center',
      stopEvent: false,
   });
   map.addOverlay(popup);

   let popover;

   function disposePopover() {
      if (popover) {
         popover.dispose();
         popover = undefined;
      }
   }

   //refactor from using bootstrap to alpinejs later
   //display popup on click
   map.on('click', function (evt) {
      const feature = map.forEachFeatureAtPixel(evt.pixel, function (feature) {
         return feature;
      });
      disposePopover();
      if (!feature) {
         return;
      }
      popup.setPosition(evt.coordinate);
      const content = `
        <div>
            <strong>Airport:</strong> ${feature.get('airport')}<br>
            <strong>Location:</strong> ${feature.get('country')}<br>
            <strong>Timezone:</strong> ${feature.get('timezone')}<br>
            <strong>GMT:</strong> ${feature.get('gmt')}<br>
        </div>
    `;

      popover = new bootstrap.Popover(element, {
         placement: 'top',
         html: true,
         content: content,
      });
      popover.show();
   });

   // change mouse cursor when over marker
   map.on('pointermove', function (e) {
      const pixel = map.getEventPixel(e.originalEvent);
      const hit = map.hasFeatureAtPixel(pixel);
      map.getTarget().style.cursor = hit ? "pointer" : "";
   });


   // Close the popup when the map is moved
   map.on('movestart', disposePopover);


   document.getElementById('zoom-out').onclick = function () {
      const view = map.getView();
      const zoom = view.getZoom();
      view.setZoom(zoom - 1);
   };

   document.getElementById('zoom-in').onclick = function () {
      const view = map.getView();
      const zoom = view.getZoom();
      view.setZoom(zoom + 1);
   };
}

templ AirportMap(data []models.Airport) {
	<html>
		<head>
			<style scoped>
				.map {
					width: 600px;
					height: 500px;
				}
				a.skiplink {
					position: absolute;
					clip: rect(1px, 1px, 1px, 1px);
					padding: 0;
					border: 0;
					height: 1px;
					width: 1px;
					overflow: hidden;
				}
				a.skiplink:focus {
					clip: auto;
					height: auto;
					width: auto;
					background-color: #fff;
					padding: 0.3em;
				}
				#map:focus {
					outline: #4A74A8 solid 0.15em;
				}
			</style>
		</head>
		<body onload={ mapContainer(data) }>
			<script defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.13.5/dist/cdn.min.js"></script>
			<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/css/bootstrap.min.css"/>
			<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/js/bootstrap.bundle.min.js"></script>
			<a class="skiplink" href="#map">Go to map</a>
			<div id="map" class="w-full h-full map" tabindex="0"><div id="popup" class="popup"></div></div>
			<button id="zoom-out" class="btn btn-secondary">Zoom out</button>
			<button id="zoom-in" class="btn btn-secondary">Zoom in</button>
		</body>
	</html>
}
