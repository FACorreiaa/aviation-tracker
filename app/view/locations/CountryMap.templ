package locations

import (
    "fmt"
    "github.com/FACorreiaa/Aviation-tracker/app/models"
    )

script countryMapContainer(data []models.Country) {
    //control selector
        const rangeInput = document.querySelector('.range');
        const updatePointsOnMap = () => {
            const selectedValue = parseInt(rangeInput.value, 10);
            // Logic to update the number of points on the map based on the selected value
            const filteredData = data.slice(0, selectedValue);
            // Clear existing features
            vectorSource.clear();
            // Add new features based on the filtered data
            vectorSource.addFeatures(filteredData.map(country => createFeatureFromCountry(country)));
        };

    // Add event listener for input change
   rangeInput.addEventListener('input', updatePointsOnMap);

  function createFeatureFromCountry(country) {

        const iconStyle = new ol.style.Style({
            image: new ol.style.Icon({
                anchor: [1, 46],
                anchorXUnits: 'fraction',
                anchorYUnits: 'pixels',
                src: '../../static/icons/marker.png',
                scale: 0.5,
            }),
        });

        const feature = new ol.Feature({
            geometry: new ol.geom.Point(ol.proj.fromLonLat([country.longitude, country.latitude])),
            country: country.country_name,
            capital: country.capital,
            continent: country.continent,
            currency: country.currency_name,
            population: country.population,
            style: iconStyle,
        });

        feature.setStyle(iconStyle);

        return feature;
    }


    const vectorSource = new ol.source.Vector({
        features: data.map(country => createFeatureFromCountry(country)),
    });

   const vectorLayer = new ol.layer.Vector({
      source: vectorSource,
   });

  const tileLayer = new ol.layer.Tile({
            source: new ol.source.OSM(),
         })

   const map = new ol.Map({
      layers: [tileLayer, vectorLayer],
      target: document.getElementById('map'),
      view: new ol.View({
         center: [0, 0],
         zoom: 1,
      }),
   });

   const element = document.getElementById('popup');
   const popup = new ol.Overlay({
      element: element,
      positioning: 'bottom-center',
      stopEvent: false,
   });
   map.addOverlay(popup);

   let popover;

   function disposePopover() {
      if (popover) {
         popover.dispose();
         popover = undefined;
      }
   }

   const tippyButton = document.getElementById('popup');
    tippy(tippyButton, {
      content: document.createElement('div'),
      interactive: true,
      trigger: 'click',
      placement: 'top',
      animation: 'scale'  ,
      theme: 'translucent'
    });

   map.on('click', function (evt) {
      const feature = map.forEachFeatureAtPixel(evt.pixel, function (feature) {
         return feature;
      });
      disposePopover();
      if (!feature) {
         return;
      }
      popup.setPosition(evt.coordinate);

      const contentDiv = document.createElement('div');
      contentDiv.innerHTML = `
            <strong>Country:</strong> ${feature.get('country')}<br>
            <strong>Capital:</strong> ${feature.get('capital')}<br>
            <strong>Continent:</strong> ${feature.get('continent')}<br>
            <strong>Currency:</strong> ${feature.get('currency')}<br>
            <strong>Population:</strong> ${feature.get('population')}<br>

    `;

      tippyButton._tippy.setContent(contentDiv);
      tippyButton._tippy.show();
   });



   map.on('pointermove', function (e) {
      const pixel = map.getEventPixel(e.originalEvent);
      const hit = map.hasFeatureAtPixel(pixel);
      map.getTarget().style.cursor = hit ? "pointer" : "";
   });


   map.on('movestart', disposePopover);


   document.getElementById('zoom-out').onclick = function () {
      const view = map.getView();
      const zoom = view.getZoom();
      view.setZoom(zoom - 1);
   };

   document.getElementById('zoom-in').onclick = function () {
      const view = map.getView();
      const zoom = view.getZoom();
      view.setZoom(zoom + 1);
   };

   map.on('dblclick', event => {
       // get the feature you clicked
       const feature = map.forEachFeatureAtPixel(event.pixel, (feature) => {
        return feature
       })
       if(feature instanceof ol.Feature){
         // Fit the feature geometry or extent based on the given map
         map.getView().fit(feature.getGeometry())
         // map.getView().fit(feature.getGeometry().getExtent())
       }
   })


   map.getView().on('change:resolution', function () {
                  if (map.getView().getZoom() < 4) {
                      vectorLayer.setVisible(false);
                  } else {
                      vectorLayer.setVisible(true);
                  }
              });

   map.on('postrender', function () {
                  if (map.getView().getZoom() < 3) {
                      vectorLayer.setVisible(false);
                  } else {
                      vectorLayer.setVisible(true);
                  }
              });
}

templ CountryMap(data []models.Country) {
	<html>
		<head>
			<style scoped>
				.map {
					width: 100%;
					height: 700px;				}
				#map:focus {
					outline: #4A74A8 solid 0.15em;
				}
			</style>
		</head>
		<body onload={ countryMapContainer(data) }>
				<div id="map" class="map" tabindex="0"><button aria-describedby="popup" data-tippy-content="popup" id="popup"></button></div>
			<div class="mt-2 text-center">
                <button id="zoom-out" class="btn btn-secondary">Zoom out</button>
                <button id="zoom-in" class="btn btn-secondary">Zoom in</button>
            </div>
            <div class="w-full form-control">
                            			<div class="label">
                            				<span class="label-text font-semi-bold text-xs badge-xs badge pb-0">Display number of markers</span>
                            			</div>
                            			<div class="flex items-center mt-2">
                            			    <span class="text-xs">0</span>
                            				<input
                            					type="range"
                            					min="0"
                            					max={fmt.Sprintf("%d", len(data))}
                            					value={fmt.Sprintf("%d", len(data))}
                            					class="range range-xs p-2 mr-2 ml-2"
                            					name="rangeValue"
                            				/>
                            				<span class="text-xs" id="rangeValue">{fmt.Sprintf("%d", len(data))}</span>
                            			</div>
                            		</div>
		</body>
	</html>
}
